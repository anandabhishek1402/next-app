# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: verily-abhi
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: cluster-1  # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: next-repo # TODO: update to Artifact Registry docker repository
  IMAGE: next-site
  ENV: dev

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
   # environment: production

    permissions:
      contents: read
      id-token: write
      deployments: 'write'
      statuses: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Alternative option - authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
        
    - id: get-tag
      name: generate release tag
      run: | 
        RELEASE_TAG=$(date --utc +%Y-%m-%dT%H%M)
        echo "tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
  
    - name: Build Docker Image
      run: |-
        docker build --build-arg ENV=${{ env.ENV }} -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.get-tag.outputs.tag }} .
        docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.get-tag.outputs.tag }}

    - id: create-release
      uses: 'google-github-actions/create-cloud-deploy-release@v1'
      with:
        name: 'demo-pipeline-githubaction-release1'
        description: 'Add new functionality to demo-app'
        delivery_pipeline: 'demo-pipeline'
        region: 'us-central1'
        images: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.get-tag.outputs.tag }}

              
    # # Set up kustomize
    # - name: Set up Kustomize
    #   run: |-
    #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
    #     chmod u+x ./kustomize

    # - name: Install Google Cloud SDK
    #   run: |-
    #     echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    #     sudo apt-get install -y apt-transport-https ca-certificates gnupg
        # sudo apt-get update && sudo apt-get install -y google-cloud-sdk

        
    # # Deploy the Docker image to the GKE cluster
    # - name: Connect to GKE Cluster
    #   run: |-
    #     gcloud container clusters get-credentials cluster-1 --zone us-central1-c --project verily-abhi 
    
    # - name: Set up GKE credentials
    #   uses: google-github-actions/get-gke-credentials@v0
    #   with:
    #     cluster_name: ${{ env.GKE_CLUSTER }}
    #     location: ${{ env.GKE_ZONE }}
        
    # - name: Deploy
    #   run: |-
    #     cd overlays/dev-unstable
    #     ../../kustomize edit set image IMAGE_REPLACE_OVERLAY=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.get-tag.outputs.tag }}
    #     ../../kustomize build . | kubectl apply -f - --validate=false


